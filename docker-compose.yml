services:
  client:
    container_name: client
    image: "node:20-alpine"
    user: "node"
    working_dir: /home/node/app/client
    environment:
      NODE_ENV: 'development'
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
      REGION: 'us-west-2'
    volumes:
      - ./client:/home/node/app/client
    ports:
      - 8080:8080
    command: sh -c "npm i && npm run build && npm run dev"
    depends_on:
     - dynamodb
  server:
    container_name: server
    image: "node:20-alpine"
    user: "node"
    working_dir: /home/node/app/server
    environment:
      NODE_ENV: 'development'
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
      REGION: 'us-west-2'
    volumes:
      - ./server:/home/node/app/server
    ports:
      - 8081:8081
    command: sh -c "npm i && npm run dev"
    depends_on:
     - dynamodb
  dynamodb:
    container_name: dynamodb
    image: "amazon/dynamodb-local:latest"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    user: root
    working_dir: /home/dynamodblocal
    ports:
      - 8000:8000
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
  dynamodb-admin:
    container_name: dynamodb-admin
    image: "aaronshaf/dynamodb-admin:latest"
    command: sh -c "npm i && npm run dev"
    ports:
     - "8001:8001"
    depends_on:
     - dynamodb
    environment:
      DYNAMO_ENDPOINT: http://dynamodb:8000
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
      AWS_REGION: 'us-west-2'
networks:
  calling-planner:
    driver: bridge
    